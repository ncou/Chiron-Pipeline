<?php

declare(strict_types=1);

namespace Chiron\Pipeline\Event;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Server\RequestHandlerInterface;

/**
 * AfterHandlerEvent is raised after the handler was executed.
 */
final class AfterHandlerEvent
{
    /** @var RequestHandlerInterface */
    private RequestHandlerInterface $handler;
    /** @var ResponseInterface|null */
    private ?ResponseInterface $response;

    /**
     * @param RequestHandlerInterface $handler Handler that was executed.
     * @param ResponseInterface|null $response Response generated by the handler or null in case there was an error.
     */
    public function __construct(RequestHandlerInterface $handler, ?ResponseInterface $response)
    {
        $this->handler = $handler;
        $this->response = $response;
    }

    /**
     * @return RequestHandlerInterface
     */
    public function getHandler(): RequestHandlerInterface
    {
        return $this->handler;
    }

    /**
     * @return ResponseInterface|null
     */
    public function getResponse(): ?ResponseInterface
    {
        return $this->response;
    }
}
